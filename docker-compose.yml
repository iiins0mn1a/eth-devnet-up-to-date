# =============================================================================
# 以太坊PoS测试网 Docker Compose 配置
# 
# 功能：
# - 启动以太坊执行层客户端 (geth)
# - 启动共识层客户端 (beacon-chain)
# - 启动验证者客户端 (validator)
# - 配置网络和依赖关系
# 
# 网络拓扑：
# - 4个beacon-chain节点
# - 4个validator节点
# - 1个geth执行层节点
# 
# 端口映射：
# - Geth RPC: 8545
# - Beacon-1: 7777
# - Beacon-2: 7778
# - Beacon-3: 7779
# - Beacon-4: 7780
# =============================================================================


services:
  # =============================================================================
  # 数据收集服务
  # =============================================================================
  
  # Bootstrap节点信息收集器
  # 从beacon-chain-1收集ENR信息供其他节点使用
  bootstrap-collector:
    image: "alpine:3.19.0"
    container_name: bootstrap-collector
    command: >
      sh -c "
        apk add --no-cache curl jq netcat-openbsd &&
        sleep 10 &&
        curl -s beacon-chain-1:7777/eth/v1/node/identity | jq -r '.data.enr' > /share/bootstrap_enr.txt
      "
    depends_on:
      geth:
        condition: service_started
      beacon-chain-1:
        condition: service_started
    volumes:
      - ./scripts:/scripts
      - ./share:/share

  # =============================================================================
  # 区块链初始化服务
  # =============================================================================
  
  # 创建beacon-chain创世状态
  # 使用Prysm工具生成包含64个验证者的创世状态
  create-beacon-chain-genesis:
    image: "gcr.io/prysmaticlabs/prysm/cmd/prysmctl:latest"
    container_name: prysmctl-genesis
    command:
      - testnet
      - generate-genesis
      - --fork=capella
      - --num-validators=64
      - --output-ssz=/consensus/genesis.ssz
      - --chain-config-file=/config/config.yml
      - --geth-genesis-json-in=/execution/genesis.json
      - --geth-genesis-json-out=/execution/genesis.json
    volumes:
      - ./config:/config
      - ./consensus:/consensus
      - ./execution:/execution

  # 清理geth数据库
  # 确保从干净状态启动
  geth-remove-db:
    image: "alpine:3.19.0"
    container_name: geth-remove-db
    command: rm -rf /execution/gethdata
    volumes:
      - ./execution:/execution

  # 初始化geth创世配置
  # 使用生成的创世文件初始化geth数据库
  geth-genesis:
    image: "ethereum/client-go:release-1.14"
    container_name: geth-genesis
    command: --datadir=/execution init /execution/genesis.json
    volumes:
      - ./execution:/execution
    depends_on:
      create-beacon-chain-genesis:
        condition: service_completed_successfully
      geth-remove-db:
        condition: service_completed_successfully

  # =============================================================================
  # 执行层服务
  # =============================================================================
  
  # Go-Ethereum执行层客户端
  # 提供执行层功能，支持PoS共识
  geth:
    image: "ethereum/client-go:release-1.14"
    container_name: geth
    entrypoint: ["/scripts/geth-entrypoint.sh"]
    volumes:
      - ./scripts:/scripts
      - ./execution:/execution
    ports:
      - 8545:8545  # JSON-RPC
    depends_on:
      geth-genesis:
        condition: service_completed_successfully

  # =============================================================================
  # 共识层服务 - Beacon Chain节点
  # =============================================================================
  
  # Beacon Chain节点 1 (Bootstrap节点)
  # 作为其他节点的发现和同步源
  beacon-chain-1:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:latest"
    container_name: beacon-chain-1
    entrypoint: ["/scripts/beacon-entrypoint.sh"]
    environment:
      - NS3_INTEGRATION=${NS3_INTEGRATION:-false}
      - CHAIN_ID=${CHAIN_ID:-32382}
      - NODE_ID=1
      - NODE_IP=10.0.0.1
      - API_PORT=7777
      - DATA_DIR=/consensus/beacondata1
      - CONFIG_FILE=/config/config-1.yml
      # - LOG_LEVEL=debug
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
      - ./execution:/execution
      - ./share:/share
    depends_on:
      geth:
        condition: service_started
      create-beacon-chain-genesis:
        condition: service_completed_successfully
    ports:
      - 7777:7777  # Beacon API (host health check)

  # Beacon Chain节点 2
  # 连接到beacon-chain-1作为bootstrap节点
  beacon-chain-2:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:latest"
    container_name: beacon-chain-2
    entrypoint: ["/scripts/beacon-entrypoint.sh"]
    environment:
      - NS3_INTEGRATION=${NS3_INTEGRATION:-false}
      - CHAIN_ID=${CHAIN_ID:-32382}
      - NODE_ID=2
      - NODE_IP=10.0.0.2
      - API_PORT=7777
      - DATA_DIR=/consensus/beacondata2
      - CONFIG_FILE=/config/config-2.yml
    # no host ports exposed (Prometheus scrapes via docker network)
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
      - ./execution:/execution
      - ./share:/share
    ports:
      - 7778:7777
    depends_on:
      geth:
        condition: service_started
      create-beacon-chain-genesis:
        condition: service_completed_successfully
      bootstrap-collector:
        condition: service_completed_successfully

  # Beacon Chain节点 3
  # 连接到beacon-chain-1作为bootstrap节点
  beacon-chain-3:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:latest"
    container_name: beacon-chain-3
    entrypoint: ["/scripts/beacon-entrypoint.sh"]
    environment:
      - NS3_INTEGRATION=${NS3_INTEGRATION:-false}
      - CHAIN_ID=${CHAIN_ID:-32382}
      - NODE_ID=3
      - NODE_IP=10.0.0.3
      - API_PORT=7777
      - DATA_DIR=/consensus/beacondata3
      - CONFIG_FILE=/config/config-3.yml
    # no host ports exposed (Prometheus scrapes via docker network)
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
      - ./execution:/execution
      - ./share:/share
    ports:
      - 7779:7777
    depends_on:
      geth:
        condition: service_started
      create-beacon-chain-genesis:
        condition: service_completed_successfully
      bootstrap-collector:
        condition: service_completed_successfully

  # Beacon Chain节点 4
  # 连接到beacon-chain-1作为bootstrap节点
  beacon-chain-4:
    image: "gcr.io/prysmaticlabs/prysm/beacon-chain:latest"
    container_name: beacon-chain-4
    entrypoint: ["/scripts/beacon-entrypoint.sh"]
    environment:
      - NS3_INTEGRATION=${NS3_INTEGRATION:-false}
      - CHAIN_ID=${CHAIN_ID:-32382}
      - NODE_ID=4
      - NODE_IP=10.0.0.4
      - API_PORT=7777
      - DATA_DIR=/consensus/beacondata4
      - CONFIG_FILE=/config/config-4.yml
    # no host ports exposed (Prometheus scrapes via docker network)
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
      - ./execution:/execution
      - ./share:/share
    ports:
      - 7780:7777
    depends_on:
      geth:
        condition: service_started
      create-beacon-chain-genesis:
        condition: service_completed_successfully
      bootstrap-collector:
        condition: service_completed_successfully

  # =============================================================================
  # 验证者服务
  # =============================================================================
  
  # 验证者客户端 1
  # 连接到beacon-chain-1，管理验证者密钥和职责
  validator-1:
    image: "gcr.io/prysmaticlabs/prysm/validator:latest"
    container_name: validator-1
    entrypoint: ["/scripts/validator-entrypoint.sh"]
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
    depends_on:
      beacon-chain-1:
        condition: service_started
    environment:
      - BEACON_RPC_PROVIDER=beacon-chain-1:4000
      - DATA_DIR=/consensus/validatordata1
      - CHAIN_CONFIG_FILE=/config/config-1.yml
      - INTEROP_NUM_VALIDATORS=32
      - INTEROP_START_INDEX=0
    # no host ports exposed (Prometheus scrapes via docker network)

  # 验证者客户端 2
  # 连接到beacon-chain-2
  validator-2:
    image: "gcr.io/prysmaticlabs/prysm/validator:latest"
    container_name: validator-2
    entrypoint: ["/scripts/validator-entrypoint.sh"]
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
    depends_on:
      beacon-chain-2:
        condition: service_started
    environment:
      - BEACON_RPC_PROVIDER=beacon-chain-2:4000
      - DATA_DIR=/consensus/validatordata2
      - CHAIN_CONFIG_FILE=/config/config-2.yml
      - INTEROP_NUM_VALIDATORS=16
      - INTEROP_START_INDEX=32
    # no host ports exposed (Prometheus scrapes via docker network)

  # 验证者客户端 3
  # 连接到beacon-chain-3
  validator-3:
    image: "gcr.io/prysmaticlabs/prysm/validator:latest"
    container_name: validator-3
    entrypoint: ["/scripts/validator-entrypoint.sh"]
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
    depends_on:
      beacon-chain-3:
        condition: service_started
    environment:
      - BEACON_RPC_PROVIDER=beacon-chain-3:4000
      - DATA_DIR=/consensus/validatordata3
      - CHAIN_CONFIG_FILE=/config/config-3.yml
      - INTEROP_NUM_VALIDATORS=8
      - INTEROP_START_INDEX=48
    # no host ports exposed (Prometheus scrapes via docker network)

  # 验证者客户端 4
  # 连接到beacon-chain-4
  validator-4:
    image: "gcr.io/prysmaticlabs/prysm/validator:latest"
    container_name: validator-4
    entrypoint: ["/scripts/validator-entrypoint.sh"]
    volumes:
      - ./scripts:/scripts
      - ./consensus:/consensus
      - ./config:/config
    depends_on:
      beacon-chain-4:
        condition: service_started
    environment:
      - BEACON_RPC_PROVIDER=beacon-chain-4:4000
      - DATA_DIR=/consensus/validatordata4
      - CHAIN_CONFIG_FILE=/config/config-4.yml
      - INTEROP_NUM_VALIDATORS=8
      - INTEROP_START_INDEX=56
    # no host ports exposed (Prometheus scrapes via docker network)

  # =============================================================================
  # 区块树可视化服务
  # =============================================================================
  
  # 区块树可视化器
  # 从beacon节点收集fork_choice数据，提供实时区块树可视化
  block-tree-visualizer:
    build: ./block-tree-visualizer
    container_name: block-tree-visualizer
    ports:
      - "8888:8000"  # 区块树可视化Web界面
    environment:
      - BEACON_ENDPOINTS=http://beacon-chain-1:7777,http://beacon-chain-2:7777,http://beacon-chain-3:7777,http://beacon-chain-4:7777
    depends_on:
      beacon-chain-1:
        condition: service_started
      beacon-chain-2:
        condition: service_started
      beacon-chain-3:
        condition: service_started
      beacon-chain-4:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # =============================================================================
  # 监控服务：Prometheus + Grafana
  # =============================================================================

  prometheus:
    image: prom/prometheus:v2.53.0
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=15d
      - --storage.tsdb.path=/prometheus
      - --web.listen-address=:9090
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    ports:
      - 9090:9090
    depends_on:
      geth:
        condition: service_started

  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards-json:ro
    ports:
      - 3000:3000
    depends_on:
      prometheus:
        condition: service_started

volumes:
  prom-data:
  grafana-data: